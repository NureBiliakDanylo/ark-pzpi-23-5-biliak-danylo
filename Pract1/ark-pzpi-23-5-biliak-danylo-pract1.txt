МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ








Звіт
з практичної роботи № 1 з дисципліни
Аналіз та рефакторинг коду
за темою “Основні рекомендації написання коду для мови програмування Dart за принципами Effective Dart”
   










Виконав:                                                                                       Перевірив:
ст. гр. ПЗПІ-23-5                                                        ст. викладач кафедри ПІ
Біляк Данило                                                                 Сокорчук Ігор Петрович
















Харків 2025
________________
МЕТА
Метою даної доповіді є всебічне ознайомлення з правилами оформлення коду в мові програмування Dart, а також усвідомлення важливості їх дотримання при створенні програмних проектів. Сьогодні програмування – це не лише написання коду, який працює, а й побудова логічної, структурованої та зрозумілої системи, яку легко підтримувати, розширювати і передавати іншим розробникам. Саме тому питання стилю програмування, уніфікації підходів до написання коду і використання інструментів автоматизації має стратегічне значення для будь-якої команди.
Основна мета полягає у тому, щоб показати, що правильне оформлення коду – це не формальність, а необхідна складова процесу розробки. Дотримання чітких правил і рекомендацій, зокрема стандартів Effective Dart, дозволяє створювати код, який не лише виконує свої функції, але й залишається зрозумілим, чистим та узгодженим між усіма учасниками команди. Завдяки цьому розробники витрачають менше часу на пошук помилок, легше орієнтуються в чужих модулях і можуть швидше інтегрувати нові рішення у спільний проект.
Отже, мета роботи полягає не лише у вивченні технічних аспектів форматування, іменування чи документування, а й у розумінні того, як ці правила впливають на загальний процес розробки, продуктивність команди та довговічність програмного забезпечення. Вона покликана сформувати у майбутніх фахівців навички писати код, який легко читати, аналізувати, тестувати та розвивати.
________________
ХІД РОБОТИ


Коли ми пишемо програмний код, головна мета – щоб він працював правильно. Але не менш важливо, щоб код був зрозумілий не тільки автору, а й іншим людям, які будуть із ним працювати. У сучасній розробці програмних продуктів над одним проектом часто працюють десятки або навіть сотні людей. Якщо кожен пише код «як зручно саме йому», у результаті виникає хаос: різні стилі, різні підходи, відсутність структури. Це ускладнює підтримку й розвиток програмного забезпечення.
Тому існують правила оформлення коду – набір домовленостей і стандартів, які допомагають зробити програму акуратною, читабельною та однаковою за стилем.
Стандартизація – це єдина мова для команди. Якщо кожен розробник пише в одному стилі:
1. Читання коду стає легшим;
2. Пошук і виправлення помилок займає менше часу;
3. Новий член команди швидко адаптується до проекту.
Для мови Dart офіційно існують рекомендації Effective Dart. Effective Dart – це офіційний набір рекомендацій від команди Dart, який пояснює, як робити код зрозумілим, послідовним і зручним для підтримки. Він охоплює стиль оформлення, правила іменування, поради щодо дизайну API та документування – тобто ті речі, які не просто роблять код «гарним», але й знижують витрати команди на підтримку й розвиток.
Дотримання правильного стилю коду має цілу низку важливих переваг, які безпосередньо впливають на ефективність роботи як окремого розробника, так і всієї команди. По-перше, читабельність. Коли код структурований і оформлений за єдиними правилами, його значно легше розуміти, навіть якщо це чужий фрагмент або код, який писався кілька місяців тому. Чіткі відступи, зрозумілі імена змінних і функцій, логічне розділення блоків дозволяють миттєво орієнтуватися у програмі.
По-друге, підтримуваність. Упорядкований код набагато легше змінювати та доповнювати. Якщо в проекті не дотримуватися стилю, з’являється плутанина з різних відступів, назв та структурних підходів, що значно ускладнює внесення змін, особливо коли над проектом працює кілька розробників. Навпаки, послідовний стиль дозволяє швидко знаходити потрібні функції чи класи і міняти їх без ризику порушити логіку.
По-третє, зменшення кількості помилок. Упорядкований код легше перевіряти на логічні неточності, адже структура і зрозумілі імена підказують, що відбувається у кожному блоці. Неправильні умови, пропущені дужки або некоректні виклики методів легше помітити, коли код не хаотичний і дотримується правил форматування.
І, нарешті, швидкість командної роботи. Коли всі члени команди користуються спільними стандартами, вони витрачають менше часу на «розшифровку» чужого коду та узгодження стилю. Це особливо важливо у великих проектах: спільні правила скорочують кількість помилок у комбінації коду різних розробників, пришвидшують рев’ю та полегшують навчання нових учасників команди.
Таким чином, правильний стиль коду – це не лише питання естетики, а потужний інструмент підвищення ефективності та якості розробки. Він робить код більш зрозумілим, надійним і готовим до тривалої підтримки та масштабування.
У Dart проекти зазвичай поділяються на пакети та директорії. Наприклад, у Flutter-програмі ми маємо окремі файли для екранів, віджетів, сервісів, моделей. Це дозволяє швидко знаходити потрібні частини коду.


Основні принципи форматування коду на Dart:
1. Один файл – одна логічна сутність (наприклад, один клас або віджет).
2. Класи та функції мають бути невеликими й відповідати за щось одне (принцип єдиної відповідальності).
3. Для великих файлів корисно використовувати коментарі-розділювачі ("//") для поділу на секції.
У Dart форматування коду не потрібно робити вручну – є інструмент "dart format", який автоматично приводить код до стандарту.
Можна виділити такі основні правила форматування:
1. Відступи робляться пробілами (2 пробіли).
2. Довжина рядка – до 80 символів, щоб текст легко читався навіть у вузькому вікні редактора.
3. Дужки розставляються за стилем K&R: відкриваюча дужка на тому ж рядку, що й ключове слово.
4. Логічні блоки коду розділяються порожнім рядком.
Наведу невеликий приклад форматування:
 1 if (user.isLoggedIn) {
 2   if (user.role == 'admin') {
 3     showAdminDashboard(user);
 4   } else if (user.role == 'moderator') {
 5     showModeratorPanel(user);
 6   } else {
 7     showUserProfile(user);
 8   }
 9 
10 } else {
11   showLoginScreen();
12 }
Іменування – це перше, що бачать люди, які знайомляться з кодом, тож від вибору імені залежить дуже багато: наскільки швидко зрозуміють призначення змінної, наскільки очевидна буде роль функції і чи легко вдасться знайти потрібний клас у великому проекті. У Dart існують чіткі рекомендації, які спрощують ці рішення: змінні та функції повинні писатися у форматі lowerCamelCase, а класи й перерахування – у UpperCamelCase. Це означає, що назва змінної або методу починається з малої літери, а кожне наступне слово – з великої: userName, calculateSum(). Класи ж виглядають як іменники, які виділяються в коді: UserProfile, PaymentStatus. Така відмінність дозволяє очам і мозку миттєво розпізнати, з чим маємо справу – тип, екземпляр чи функція.
Для констант виникає окрема ситуація. У Dart звично використовувати lowerCamelCase для констант, наприклад pi, але в багатьох командах прийнято додавати префікс “k” для позначення константи на кшталт kDefaultTimeout. Обидва підходи допустимі, але другий вважається поганим. Також важливо дотримуватися єдиної угоди у проекті: якщо в одному місці використовуєш kMaxItems, не варто поруч мати MAX_ITEMS або max_items – незгода у стилі тільки плутає.
Варто згадати про коментарі, вони допомагають пояснити код, але з ними важливо не переборщити. Використовувати їх варто для пояснення чому щось зроблено саме так, а не для пояснення очевидного. Якщо функція має зрозумілу назву, коментар зайвий. Коментарі також можуть відділяти великі частини файлу.
Приклад поганого коментаря:
1 int a = 5; // створюємо змінну a зі значенням 5
Приклад правильного коментаря:
1 // Обмеження кількості спроб авторизації, щоб уникнути brute force.
2 const int kMaxLoginAttempts = 5;


Для зручності у Dart є спеціальний тип коментарів "///", які створюють документацію, тобто, виділяють великі ділянки тексту, що не є кодом, а є поясненням:
1 /// Обчислює суму двох чисел.
2 /// [a] і [b] – вхідні значення.
3 /// Повертає результат додавання.
4 int add(int a, int b) => a + b;
Такі коментарі інтегруються з інструментами автогенерації документації.
        У різних мовах програмування традиції форматування коду склалися по-своєму, і часто вони настільки усталені, що відрізняють одну мову від іншої. Це своєрідний “почерк спільноти”, який допомагає розробникам швидше орієнтуватися в коді. Наприклад, у Python ключовим стилем іменування є snake_case: усі слова пишуться малими літерами й розділяються підкресленням. Саме тому в коді на Python ми часто бачимо такі назви, як user_name, calculate_total чи max_value. Це робить код простим і дуже читабельним — одразу видно, де закінчується одне слово і починається інше.
У світі Java підхід інший. Для змінних і методів використовується стиль camelCase, де перше слово починається з малої літери, а кожне наступне — з великої. Наприклад: userName, calculateSum(). Класи ж у Java пишуться у форматі PascalCase (його ще називають UpperCamelCase), де кожне слово починається з великої літери: UserProfile, OrderManager. Такий поділ створює чітку різницю між типами та функціями і полегшує орієнтацію в коді великих проєктів.
У C++ традиційно існує кілька стилів розташування дужок і відступів. Найвідоміші з них – Allman і K&R.
Що ж до Dart, тут усе набагато жорсткіше стандартизовано. Для нього у Effective Dart детально описані правила оформлення: від відступів і розташування дужок до правил іменування змінних, класів і файлів. І якщо в інших мовах допустимо кілька традиційних стилів, то в Dart майже немає простору для імпровізації – правила єдині, і їх рекомендують застосовувати у всіх проектах. Це робить код однорідним і дає відчуття, що над ним працювала одна людина, навіть якщо насправді його писала ціла команда.
У середовищі Dart процес перевірки стилю та якості коду винесений на окремий рівень завдяки вбудованим інструментам. Розробнику не потрібно самостійно відстежувати всі відхилення від стандартів, адже це завдання виконує статичний аналізатор. Команда dart analyze дозволяє знайти потенційні проблеми ще до запуску програми: це можуть бути некоректні імена змінних, дублювання коду, неправильне використання типів чи навіть логічні неточності. Таким чином, аналізатор виступає своєрідним “наглядачем” за чистотою і послідовністю коду.
Крім цього, форматування коду значно спрощується за допомогою автоматичного інструменту. Виклик команди dart format приводить увесь файл чи проект до єдиного стилю, який відповідає офіційним рекомендаціям. Це усуває потребу вручну вирівнювати відступи, дбати про правильне розташування дужок чи пробілів – система зробить це за розробника. У результаті, код залишається не лише більш читабельним, а й послідовним у всьому проекті, що особливо важливо при роботі в команді.
Ще один важливий аспект у забезпеченні якості коду – це підхід кодування на основі тестування, відомий як TDD (Test-Driven Development). Ідея TDD полягає у тому, що розробник спочатку створює тести, які описують, як повинен працювати код, а вже після цього пише саму реалізацію. Такий порядок дозволяє мислити про логіку функцій із самого початку, визначати очікувані результати й передбачати потенційні помилки ще до їхнього виникнення.
Переваги цього підходу очевидні: ви швидше знаходите помилки, зменшуєте ризики при внесенні змін у проект і робите код більш надійним і передбачуваним. Крім того, TDD допомагає підтримувати чистоту архітектури: якщо тест важко написати, значить, можливо, функція або модуль занадто складні й потребують рефакторингу.
У мові Dart підхід TDD теж дуже доречний. Для організації тестів використовують спеціальний пакет test, який дозволяє створювати юніт-тести для функцій, класів і навіть інтеграційні сценарії. Завдяки цьому тестування інтегрується у звичний процес розробки, і команда може автоматично перевіряти правильність роботи кожного нового фрагмента коду.
        Щоб підтримувати високу якість коду в Dart-проєктах, використовують комплекс інструментів та автоматизацію, яка дозволяє виявляти помилки ще до того, як код потрапляє у спільний репозиторій. Перш за все, це статичний аналізатор, який виконується за допомогою команди dart analyze, про який ми вже згадували раніше. Він перевіряє код на наявність синтаксичних помилок, невідповідностей типів, порушень стилю та потенційно небезпечних конструкцій. Це дозволяє розробникам виправляти проблеми на ранньому етапі, ще до запуску програми.
Додатково широко застосовують підхід CI/CD (Continuous Integration / Continuous Delivery), який автоматично запускає тести та аналіз коду при кожному коміті. Це означає, що жоден шматок коду не потрапить у спільний проект без перевірки його правильності та відповідності стандартам. У поєднанні зі статичним аналізом це створює надійний бар’єр проти помилок і недоліків у стилі.
Ще один інструмент контролю – Git Hooks, які працюють локально на машині розробника. Вони можуть блокувати коміт або пуш у репозиторій, якщо код не відповідає встановленим правилам форматування або не проходить тести. Це дозволяє підтримувати “чистий” репозиторій, де весь код автоматично відповідає прийнятим стандартам, і команді не доводиться вручну перевіряти внески кожного учасника.
Таким чином, поєднання статичного аналізу, CI/CD і Git Hooks дозволяє не лише підтримувати якість коду на високому рівні, а й зменшити витрати часу на перевірку та виправлення помилок у командних проектах.
Тепер давайте розглянемо приклади написання коду.
Поганий приклад:
1 function CALC_totalPrice(items,DISCOUNT_RATE,TAX){
2  let t=0;for(let i=0;i<items.length;i++){t+=items[i].p}
3 let d=t-(t*DISCOUNT_RATE/100);let result=d+(d*TAX/100);return result.toFixed(2)}
4 function printrec(I){
5 console.log("receipt:")
6 for(let i=0;i<I.length;i++){console.log(I[i].n+":"+I[i].p+"$")}
7 console.log("TOTAL:"+CALC_totalPrice(I,10,20))}
8 let I=[{n:"Tea",p:10},{n:"coffee",p:15},{n:"CAKE",p:25}]
9 printrec(I)


        Такий формат написання коду виглядає нечитабельним, неохайним та нестандартизованим. Якщо у команді з’явиться новий розробник, то йому буде важко зрозуміти написане без ретельного вичитування.
Хороший приклад:
 1 function calculateTotalPrice(items, discountRate, taxRate) {
 2     let total = 0;
 3 
 4     for (let i = 0; i < items.length; i++) {
 5         total += items[i].price;
 6     }
 7 
 8     let discounted = total - (total * discountRate / 100);
 9     let result = discounted + (discounted * taxRate / 100);
10 
11     return result.toFixed(2);
12 }
13 
14 function printReceipt(items) {
15     console.log("Receipt:");
16 
17     for (let i = 0; i < items.length; i++) {
18         console.log(`${items[i].name}: ${items[i].price}$`);
19     }
20 
21     console.log("Total:", calculateTotalPrice(items, 10, 20));
22 }
23 
24 let items = [
25     { name: "Tea", price: 10 },
26     { name: "Coffee", price: 15 },
27     { name: "Cake", price: 25 },
28 ];
29 
30 printReceipt(items);
        А в цьому прикладі код можна зрозуміти на льоту, кожен логічний блок відділено один від одного, форматування рядків допомагає візуально розрізняти частини коду та легше читати їх. Саме до таких якостей коду мають прагнути розробники, особливо якщо вони працюють у команді.
________________


ВИСНОВКИ
Отже на основі вищеприведених матеріалів можна зазначити, що:
1. Оформлення коду – це не формальність, а реальний інструмент для зручності та якості.
2. Єдині стандарти забезпечують читабельність, підтримуваність і надійність програм.
3. У Dart існують офіційні правила, які можна автоматизувати за допомогою вбудованих інструментів.
4. Чистий код – це запорука ефективної командної роботи й швидкої розробки.
У процесі роботи ми переконалися, що правила оформлення коду мають безпосередній вплив на якість програмного продукту. Дотримання єдиного стилю робить код зрозумілішим, спрощує його підтримку та мінімізує кількість помилок. Стандарти Dart, описані в Effective Dart, забезпечують єдність структури проекту, зрозуміле іменування елементів і узгоджене форматування. Використання інструментів, таких як dart analyze і dart format, дозволяє підтримувати порядок у коді автоматично, а підхід TDD (Test-Driven Development) допомагає підвищити надійність програм.
Таким чином, чистий і добре структурований код – це не лише показник професіоналізму розробника, а й запорука стабільності та довговічності програмного забезпечення. Дотримання стандартів оформлення сприяє ефективній командній роботі, спрощує навчання нових учасників та створює міцну основу для подальшого розвитку проекту.


        
________________


ВИКОРИСТАНІ ДЖЕРЕЛА


1. Офіційна документація Dart. URL: https://dart.dev/docs (дата звернення: 29.09.2025)
2. Effective Dart. URL: https://dart.dev/effective-dart (дата звернення: 29.09.2025)
3. Martin R. Robert C. Martin Clean Code Collection (Collection). Pearson Education, Limited.
________________
ДОДАТОК А
Посилання на відео з презентацією: https://youtu.be/vnlN9DctHcI
________________
ДОДАТОК Б
  
Рисунок 1 - слайд презентації №1  Рисунок 2 - слайд презентації №2  Рисунок 3 - слайд презентації №3  Рисунок 4 - слайд презентації №4  Рисунок 5 - слайд презентації №5  Рисунок 6 - слайд презентації №6  Рисунок 7 - слайд презентації №7  Рисунок 8 - слайд презентації №8  Рисунок 9 - слайд презентації №9  Рисунок 10 - слайд презентації №10  Рисунок 11 - слайд презентації №11  Рисунок 12 - слайд презентації №12  Рисунок 13 - слайд презентації №13  Рисунок 14 - слайд презентації №14  Рисунок 15 - слайд презентації №15  Рисунок 16 - слайд презентації №16  Рисунок 17 - слайд презентації №17  Рисунок 18 - слайд презентації №18  Рисунок 19 - слайд презентації №19
